// Generated by CoffeeScript 1.10.0
var Flannel, Split, Winston, version,
  slice = [].slice;

Winston = require("winston");

Split = require("split");

version = require("../package.json").version;

Flannel = (function() {
  function Flannel() {}

  Flannel.enabled = true;

  Flannel.logLevels = ["  err", " warn", " info", "debug"];

  Flannel.colorize = true;

  Flannel.logLevelColors = {
    "  err": "red",
    " warn": "yellow",
    " info": "green",
    "debug": "blue"
  };

  Flannel._dependencyMap = {
    "Couchdb": "winston-couchdb",
    "Logentries": "le_node",
    "Loggly": "winston-loggly",
    "Logzio": "winston-logzio",
    "Mongodb": "winston-mongodb",
    "Riak": "winston-riak"
  };

  Flannel.makeLevels = function(levels) {
    var i, j, len, level, ref;
    if (levels == null) {
      levels = {};
    }
    ref = this.logLevels;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      level = ref[i];
      levels[level] = i;
    }
    return levels;
  };

  Flannel.init = function(transports1) {
    var fn, j, len, level, ref;
    this.transports = transports1 != null ? transports1 : {
      Console: {}
    };
    this.winston || (this.winston = new Winston.Logger);
    this.setupWinston(this.transports);
    this._helpers || (this._helpers = {});
    ref = this.logLevels;
    fn = (function(_this) {
      return function(level) {
        return _this._helpers[level.trim()] = function() {
          var objs;
          objs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return Flannel.log.apply(Flannel, [level, this.logPrefix].concat(slice.call(objs)));
        };
      };
    })(this);
    for (j = 0, len = ref.length; j < len; j++) {
      level = ref[j];
      fn(level);
    }
    if (this._helpers.debug) {
      this._helpers.log = this._helpers.debug;
    }
    this.log(this.logLevels.slice(-1)[0], "(Flannel:init) flannel " + version + ": feel like a lumberjack");
    return this;
  };

  Flannel.setupWinston = function(transportMap) {
    var levels, logger, logopts, transports;
    levels = this.makeLevels();
    Winston.addColors(this.logLevelColors);
    transports = (function() {
      var results;
      results = [];
      for (logger in transportMap) {
        logopts = transportMap[logger];
        logopts.levels || (logopts.levels = levels);
        if (logopts.colorize == null) {
          logopts.colorize = this.colorize;
        }
        if (this._dependencyMap[logger]) {
          require(this._dependencyMap[logger]);
        }
        results.push(new Winston.transports[logger](logopts));
      }
      return results;
    }).call(this);
    return this.winston.configure({
      transports: transports,
      levels: levels
    });
  };

  Flannel.morgan = function(level, format, opts) {
    if (level == null) {
      level = this.logLevels[1];
    }
    if (format == null) {
      format = "combined";
    }
    if (opts == null) {
      opts = {};
    }
    opts.stream || (opts.stream = this.streamToWinston(level));
    return this._morgan || (this._morgan = (require("morgan"))(format, opts));
  };

  Flannel.streamToWinston = function(level) {
    return Split().on("data", (function(_this) {
      return function(line) {
        return _this.winston.log(level, line);
      };
    })(this));
  };

  Flannel.shirt = function(obj) {
    if (obj) {
      return this.wear.call(obj, this.shirt());
    } else {
      return this._helpers;
    }
  };

  Flannel.wear = function(clothing) {
    var item, results, worn;
    results = [];
    for (item in clothing) {
      worn = clothing[item];
      results.push(this[item] = worn);
    }
    return results;
  };

  Flannel.log = function() {
    var level, objs, ref;
    level = arguments[0], objs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!this.enabled) {
      return;
    }
    return (ref = this.winston).log.apply(ref, [level].concat(slice.call(objs)));
  };

  return Flannel;

})();

module.exports = Flannel;
